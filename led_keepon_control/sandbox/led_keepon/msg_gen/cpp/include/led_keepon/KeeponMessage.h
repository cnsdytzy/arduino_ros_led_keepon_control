/* Auto-generated by genmsg_cpp for file /net/home4/harihar.subramanyam/led_keepon_control/sandbox/led_keepon/msg/KeeponMessage.msg */
#ifndef LED_KEEPON_MESSAGE_KEEPONMESSAGE_H
#define LED_KEEPON_MESSAGE_KEEPONMESSAGE_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"


namespace led_keepon
{
template <class ContainerAllocator>
struct KeeponMessage_ {
  typedef KeeponMessage_<ContainerAllocator> Type;

  KeeponMessage_()
  : device(0)
  , cmd1(0)
  , cmd0(0)
  {
  }

  KeeponMessage_(const ContainerAllocator& _alloc)
  : device(0)
  , cmd1(0)
  , cmd0(0)
  {
  }

  typedef int32_t _device_type;
  int32_t device;

  typedef int32_t _cmd1_type;
  int32_t cmd1;

  typedef int32_t _cmd0_type;
  int32_t cmd0;


  typedef boost::shared_ptr< ::led_keepon::KeeponMessage_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::led_keepon::KeeponMessage_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct KeeponMessage
typedef  ::led_keepon::KeeponMessage_<std::allocator<void> > KeeponMessage;

typedef boost::shared_ptr< ::led_keepon::KeeponMessage> KeeponMessagePtr;
typedef boost::shared_ptr< ::led_keepon::KeeponMessage const> KeeponMessageConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::led_keepon::KeeponMessage_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::led_keepon::KeeponMessage_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace led_keepon

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::led_keepon::KeeponMessage_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::led_keepon::KeeponMessage_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::led_keepon::KeeponMessage_<ContainerAllocator> > {
  static const char* value() 
  {
    return "2101c2ea4b2b158a443252950557dd65";
  }

  static const char* value(const  ::led_keepon::KeeponMessage_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x2101c2ea4b2b158aULL;
  static const uint64_t static_value2 = 0x443252950557dd65ULL;
};

template<class ContainerAllocator>
struct DataType< ::led_keepon::KeeponMessage_<ContainerAllocator> > {
  static const char* value() 
  {
    return "led_keepon/KeeponMessage";
  }

  static const char* value(const  ::led_keepon::KeeponMessage_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::led_keepon::KeeponMessage_<ContainerAllocator> > {
  static const char* value() 
  {
    return "int32 device\n\
int32 cmd1\n\
int32 cmd0\n\
\n\
";
  }

  static const char* value(const  ::led_keepon::KeeponMessage_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::led_keepon::KeeponMessage_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::led_keepon::KeeponMessage_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.device);
    stream.next(m.cmd1);
    stream.next(m.cmd0);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct KeeponMessage_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::led_keepon::KeeponMessage_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::led_keepon::KeeponMessage_<ContainerAllocator> & v) 
  {
    s << indent << "device: ";
    Printer<int32_t>::stream(s, indent + "  ", v.device);
    s << indent << "cmd1: ";
    Printer<int32_t>::stream(s, indent + "  ", v.cmd1);
    s << indent << "cmd0: ";
    Printer<int32_t>::stream(s, indent + "  ", v.cmd0);
  }
};


} // namespace message_operations
} // namespace ros

#endif // LED_KEEPON_MESSAGE_KEEPONMESSAGE_H

